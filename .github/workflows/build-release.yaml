name: Build and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  PROJECT_NAME: r-synced

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64 (amd64)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_ext: .tar.gz
            binary_ext: ""

          # Linux aarch64 (arm64)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_ext: .tar.gz
            binary_ext: ""

          # macOS x86_64 (Intel)
          - os: macos-13
            target: x86_64-apple-darwin
            archive_ext: .zip
            binary_ext: ""

          # macOS aarch64 (Apple Silicon)
          - os: macos-14
            target: aarch64-apple-darwin
            archive_ext: .zip
            binary_ext: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies (for egui)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cross-compilation tools (for aarch64 on x86_64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Strip the binary
        if: runner.os != 'Windows'
        run: |
          strip target/${{ matrix.target }}/release/${{ env.PROJECT_NAME }}${{ matrix.binary_ext }}

      - name: Package artifacts
        shell: bash
        run: |
          ARTIFACT_DIR="target/${{ matrix.target }}/release"
          BINARY_NAME="${{ env.PROJECT_NAME }}${{ matrix.binary_ext }}"
          ASSET_NAME="${{ env.PROJECT_NAME }}-${{ matrix.target }}${{ matrix.archive_ext }}"
          
          echo "Binary path: ${ARTIFACT_DIR}/${BINARY_NAME}"
          echo "Asset name: ${ASSET_NAME}"

          if [ "${{ matrix.archive_ext }}" = ".zip" ]; then
            cd "${ARTIFACT_DIR}"
            zip "${ASSET_NAME}" "${BINARY_NAME}"
            mv "${ASSET_NAME}" ../../../
            cd ../../../
          else
            tar -czf "${ASSET_NAME}" -C "${ARTIFACT_DIR}" "${BINARY_NAME}"
          fi

          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_NAME }}

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true